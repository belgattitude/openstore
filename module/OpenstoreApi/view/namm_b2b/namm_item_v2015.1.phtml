<?php 
namespace OpenstoreApi\Custom\Namm2011;

use \DateTime;
use \DateTimeZone;
use \Zend\Escaper\Escaper;
use Ramsey\Uuid\Uuid;
use Ramsey\Uuid\Exception\UnsatisfiedDependencyException;


class Fcts {

    static $enablePrintXMLComments = true;
    static protected $escaper;

    /*
    function getInstance()
    {
        return new Fcts();
    }

    private function __construct()
    {

    }
    */

    static function setEscaper($escaper)
    {
        self::$escaper = $escaper;
    }

    static function convertKgmInLbs($kg, $return=0) {
        if ($kg == "")  return $return;

        return self::formatNumber($kg * 2.20462, 2);
        /*
        $mass = new Mass($kg, 'kg');
        $lbs = self::formatNumber($mass->toUnit('lbs'), 2);
        return $lbs;
         *
         */
    }

    static function convertMeterInInch($meter, $return=0) {
        if ($meter == "")  {
            return $return;
        }
        return self::formatNumber($meter * 39.3701, 2);

        /*
        $length = new Length($meter, 'meter');
        $inches = self::formatNumber($length->toUnit('inch'), 2);
        return $inches;

         */
    }

    static function convertDateTime($datetime)
    {
        if ($datetime == '') return '';
        $dt = DateTime::createFromFormat('Y-m-d h:i:s', $datetime);
        $datetime =  $dt->format(DateTime::ATOM);
        //Y-m-d\TH:i:sP
        //2011-08-11T05:39:10.887

        return $datetime;

    }

    static function formatNumber($number, $decimals=2)
    {
        return number_format($number, $decimals, '.', '');
    }


    static function convertDate($date) {
        //return $date;
        if ($date == '') return '';
        //$tz = new DateTimeZone('Europe\Brussels');
        return DateTime::createFromFormat('Y-m-d', $date)->format('Y-m-d');
        //$date =  $d->format('Y-m-d');
        //return $date;
    }

    static function getPictureMediaUrl($picture_media_id)
    {
        if ($picture_media_id == '') return '';
        $p = 'http://api.emdmusic.com/media/preview/picture/1200x1200-90/%pref%/%picture_media_id%.jpg';
        $p = str_replace('%pref%', str_pad(substr($picture_media_id, -2), 2, "0", STR_PAD_LEFT), $p);
        $p = str_replace('%picture_media_id%', $picture_media_id, $p);
        return $p;
    }

    static function escapeXMLText($text) {
        return self::$escaper->escapeHtml(trim($text));
    }

    /**
     * @return string
     */
    static function genUUID() {
        try {
            $uuid = (string) Uuid::uuid4();
        } catch (UnsatisfiedDependencyException $e) {
            $uuid = uniqid();
        }
        return strtoupper($uuid);
    }


    static function printXMLComment($comments)
    {
        if (self::$enablePrintXMLComments) {
            echo '<!--';
            echo $comments;
            echo '-->';
        }
    }
}


$escaper = new Escaper('utf-8');
Fcts::setEscaper($escaper);

//http://api.emdmusic.com/media/preview/picture/170x200-90/%%/%picture_media_id%.jpg
//$picture_url_spec = "http://api.emdmusic.com/media/picture/%picture_media_id%_1024x768-90.jpg";
?>
<?= '<?xml version="1.0" encoding="utf-8" ?>' . "\n"; ?>
<NAMM_ITEM xmlns="http://namm.org/b2b/2015/schemas" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" version="2015.1" xsi:schemaLocation="http://www.namm.org/files/NAMM_Standards/v2015.1/schemas/Item-v2015.1.xsd">
  <!--
  EMDMusic namm_item_v2015.1.xml template
  See https://www.namm.org/standards/implementation-guide-/xml-tag-reference/item-document

  Changelog:
     [2016/09/28] Vanvelthem SÃ©bastien, initial implementation
  -->

  <!-- Document timestamp, ATOM format -->
  <Timestamp><?= Fcts::convertDateTime(date('Y-m-d h:i:s')) ?></Timestamp>

  <!-- UUIDv4 -->
  <Id><?= Fcts::genUUID() ?></Id>

  <!-- GLN/NAMM partner ID, currently EMD seems to not have one ? -->
  <SupplierId>0</SupplierId>

  <?php
    $options = $this->store->getOptions();
    $options->getHydrationOptions()->disableFormatters();
    $data = $this->store->getData($options);
  ?>  
  <Items>
    <?php foreach($data as $idx => $line) : ?>
    <?php if ($idx > 0) Fcts::$enablePrintXMLComments = false; ?>  
    <Item>
        <?= Fcts::printXMLComment("<SupplierItemId> at EMD is numeric, for SKU or product reference look <SupplierModel>") ?>
        <SupplierItemId><?= $line->product_id ?></SupplierItemId>
        <SupplierModel><?= Fcts::escapeXMLText(trim($line->product_reference)) ?></SupplierModel>
        <?= Fcts::printXMLComment("<SupplierItemDesc> is the product title. For full description, see marketing section") ?>
        <SupplierItemDesc><?= Fcts::escapeXMLText(trim($line->product_title)) ?></SupplierItemDesc>
        <?= Fcts::printXMLComment("Item SKU made up of other SKUs") ?>
        <Kit>N</Kit>
        <?= Fcts::printXMLComment("Item has a serial number") ?>
        <Serialized>N</Serialized>
        <BrandName><?= Fcts::escapeXMLText($line->brand_title) ?></BrandName>
        <?php Fcts::printXMLComment(
                "Country origin is not 100% accurate.\n" .
                "Currently only known for Stagg/James Neligan and Angel Lopez...\n" .
                "... but be aware minor exceptions exists, like Thailand for few products in Europe.\n"
              );
        ?>
        <CountryOrigin><?= in_array($line->brand_reference, ['STAG', 'ANGE', 'JAME']) ? 'CN' : ''; ?></CountryOrigin>
        <?php Fcts::printXMLComment('Dimensions LxWxH are to be considered product dimensions, product measurements are not always available. See containers for product package dimensions.') ?>
        <Length><?= Fcts::convertMeterInInch($line->length) ?></Length>
        <Width><?= Fcts::convertMeterInInch($line->width) ?></Width>
        <Height><?= Fcts::convertMeterInInch($line->height) ?></Height>
        <DimUOM>IN</DimUOM>
        <?php Fcts::printXMLComment('Product weight (gross)') ?>
        <Weight><?= Fcts::convertKgmInLbs($line->weight); ?></Weight>
        <WeightUOM>LBS</WeightUOM>
        <AnnounceDate><?= Fcts::convertDate($line->available_at) ?></AnnounceDate>
        <AvailableDate><?= Fcts::convertDate($line->available_at) ?></AvailableDate>
        <?php Fcts::printXMLComment('<UnavailableDate> is not supported at EMD') ?>
        <WarrantyPartTerm>365</WarrantyPartTerm>
        <WarrantyPartUOM>Day</WarrantyPartUOM>
        <WarrantyLabTerm>0</WarrantyLabTerm>
        <WarrantyLabUOM>Day</WarrantyLabUOM>        
        <Barcodes>
            <?php Fcts::printXMLComment('For USA and Canada, use only the GTIN-12/UPCA barcode. The EAN13/GTIN13 is for Europe') ?>
            <Barcode>
                <ID><?= $line->product_barcode_upca ?></ID>
                <Type>GTIN-12</Type>
            </Barcode>
            <Barcode>
                <ID><?= $line->product_barcode_ean13 ?></ID>
                <Type>GTIN-13</Type>
            </Barcode>
        </Barcodes>        
        <Pricing>
            <Price type="MSRP" Currency="<?= $line->currency_reference ?>" Qty="1"><?= Fcts::formatNumber($line->public_price, 2); ?></Price>
            <?php Fcts::printXMLComment('Map price is only available in the US and Canada'); ?>
            <Price type="MAP" Currency="<?= $line->currency_reference ?>" Qty="1"><?= Fcts::formatNumber($line->map_price, 2); ?></Price>
            <Price type="Cost" Currency="<?= $line->currency_reference ?>" Qty="1"><?= Fcts::formatNumber($line->price, 2); ?></Price>
        </Pricing>        
        <Containers>
            <Container>
                <?php Fcts::printXMLComment('Product container (unit)') ?>
                <Type>Each</Type>
                <Length><?= Fcts::convertMeterInInch($line->pack_unit_length) ?></Length>
                <Width><?= Fcts::convertMeterInInch($line->pack_unit_width) ?></Width>
                <Height><?= Fcts::convertMeterInInch($line->pack_unit_height) ?></Height>
                <DimUOM>IN</DimUOM>
                <?php Fcts::printXMLComment('Gross weight') ?>
                <Weight><?= Fcts::convertKgmInLbs($line->pack_unit_weight) ?></Weight>
                <WeightUOM>LBS</WeightUOM>
                <UOM>EA</UOM>
                <QtyPerUOM>1</QtyPerUOM>
                <Barcodes>
                    <?php Fcts::printXMLComment('For USA and Canada, use only the GTIN-12/UPCA barcode. The EAN13/GTIN13 is for Europe') ?>
                    <Barcode>
                        <ID><?= $line->product_barcode_upca ?></ID>
                        <Type>GTIN-12</Type>
                    </Barcode>
                    <Barcode>
                        <ID><?= $line->product_barcode_ean13 ?></ID>
                        <Type>GTIN-13</Type>
                    </Barcode>
                </Barcodes>
            </Container>
            <?php if ($line->pack_qty_carton != '') : ?>
            <Container>
                <Type>Carton</Type>
                <Length><?= Fcts::convertMeterInInch($line->pack_carton_length) ?></Length>
                <Width><?= Fcts::convertMeterInInch($line->pack_carton_width) ?></Width>
                <Height><?= Fcts::convertMeterInInch($line->pack_carton_height) ?></Height>
                <DimUOM>IN</DimUOM>
                <Weight><?= Fcts::convertKgmInLbs($line->pack_carton_weight) ?></Weight>
                <WeightUOM>LBS</WeightUOM>
                <UOM>EA</UOM>
                <QtyPerUOM><?php 
                    $pack_qty_carton = $line->pack_qty_carton;
                    if ($pack_qty_carton != '') {
                        echo number_format($pack_qty_carton, 0);
                    }
                ?></QtyPerUOM>
                <Barcodes>
                    <?php Fcts::printXMLComment('For USA and Canada, use only the GTIN-12/UPCA barcode. The EAN13/GTIN13 is for Europe') ?>
                    <Barcode>
                        <ID><?= $line->pack_carton_barcode_upc ?></ID>
                        <Type>GTIN-12</Type>
                    </Barcode>
                    <Barcode>
                        <ID><?= $line->pack_carton_barcode_ean ?></ID>
                        <Type>GTIN-13</Type>
                    </Barcode>
                </Barcodes>
            </Container>
            <?php endif; ?>
            <?php if ($line->pack_qty_master_carton != '') : ?>
            <Container>
                <Type>Mastercarton</Type>
                <Length><?= Fcts::convertMeterInInch($line->pack_mastercarton_length) ?></Length>
                <Width><?= Fcts::convertMeterInInch($line->pack_mastercarton_width) ?></Width>
                <Height><?= Fcts::convertMeterInInch($line->pack_mastercarton_height) ?></Height>
                <DimUOM>IN</DimUOM>
                <Weight><?= Fcts::convertKgmInLbs($line->pack_mastercarton_weight) ?></Weight>
                <WeightUOM>LBS</WeightUOM>
                <UOM>EA</UOM>
                <QtyPerUOM><?php 
                    $pack_qty_master_carton = $line->pack_qty_master_carton;
                    if ($pack_qty_master_carton != '') {
                        echo Fcts::formatNumber($pack_qty_master_carton, 0);
                    }
                ?></QtyPerUOM>
                <Barcodes>
                    <?php Fcts::printXMLComment('For USA and Canada, use only the GTIN-14 / upca barcode. The EAN13/GTIN13 is for Europe') ?>
                    <Barcode>
                        <ID><?= $line->pack_mastercarton_barcode_upc ?></ID>
                        <Type>GTIN-14</Type>
                    </Barcode>
                    <Barcode>
                        <ID><?= $line->pack_mastercarton_barcode_ean ?></ID>
                        <Type>GTIN-13</Type>
                    </Barcode>
                </Barcodes>
            </Container>
            <?php endif; ?>
        </Containers>
        <MarketingInfo>
            <?php Fcts::printXMLComment("Most emd internal categories provides a mapping with the standard NAMM categs, \n" .
                                        "when none found the <PrimaryCateg> is left blank."); ?>
            <PrimaryCategory><?= $line->namm_categ_code ?></PrimaryCategory>
            <!--
            @EMD category: <?= $line->category_breadcrumb ?> (<?= $line->category_reference ?>)
            @EMD group: <?= $line->group_reference ?> (<?= $line->group_title ?>)
            -->

            <?php Fcts::printXMLComment('Product URL is currently not supported'); ?>
            <ProductURL></ProductURL>
            <?php
                $desc = trim($line->product_title . ' ' . $line->product_description . ' ' . $line->product_characteristic);
                $desc = preg_replace('/(\ ){2,}/', ' ', $desc);
            ?>
            <ItemDescLong><![CDATA[
                <?= Fcts::escapeXMLText($desc) ?>
                ]]>
            </ItemDescLong>
            <Bullets>
                <?php
                $descBullets = explode("\n", $line->product_description);
                ?>
                <?php foreach($descBullets as $bullet) : ?>
                    <?php if (trim($bullet) != '' && preg_match('/^\-\ /', trim($bullet))): ?>
                    <Bullet><?= Fcts::escapeXMLText(preg_replace('/^\-\ /', '', trim($bullet))) ?></Bullet>
                    <?php endif; ?>
                <?php endforeach;?>
                <?php if (trim($line->product_characteristic) != '') : ?>
                    <Bullet><?= Fcts::escapeXMLText(preg_replace('/^\-\ /', '', trim($line->product_characteristic))) ?></Bullet>
                <?php endif; ?>
            </Bullets>
            <Media>
                <?php if ($line->picture_media_id != '') : ?>
                <Images>
                    <Image Audience="Consumer" View="Primary"><?php if ($line->picture_media_id != '') echo Fcts::getPictureMediaUrl($line->picture_media_id); ?></Image>
                </Images>
                <?php endif; ?>
            </Media>  
            <Keywords>
              <Keyword/>
            </Keywords>            
        </MarketingInfo>        
    </Item>
    <?php endforeach; ?>  
  </Items>
</NAMM_ITEM>